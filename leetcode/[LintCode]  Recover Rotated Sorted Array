 /**
  * - Given a rotated sorted array, recover it to sorted array in-place.
  * - Example [4, 5, 1, 2, 3] -> [1, 2, 3, 4, 5]
  * - 思路是三次反转数组，第一次反转以后用一个o(n)时间找到要反转的点，然后再对index的左右两侧进行两次反转。
  */ 

import java.util.ArrayList;


public class Solution {
    /**
     * @param nums: The rotated sorted array
     * @return: The recovered sorted array
     */
    private void reverse(ArrayList<Integer> nums, int start, int end) {
        for (int i = start, j = end; i < j; i++, j--) {
            int temp = nums.get(i);
            nums.set(i, nums.get(j));
            nums.set(j, temp);
        }
    }

    public void recoverRotatedSortedArray(ArrayList<Integer> nums) {
        for (int index = 0; index < nums.size() - 1; index++) {
            if (nums.get(index) > nums.get(index + 1)) {
                reverse(nums, 0, index);
                reverse(nums, index + 1, nums.size() - 1);
                reverse(nums, 0, nums.size() - 1);
                return;
            }
        }
    }
}
